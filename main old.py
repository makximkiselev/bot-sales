import asyncio  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
import sqlite3
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from cachetools import TTLCache
from typing import List, Tuple
from aiogram.exceptions import TelegramAPIError

# ----------------- CONFIGURATION ------------------
GOOGLE_SHEET_KEY = '1OTHRzo4OAH_bWuplxYjwqpyJm857mYm0kaG0RHhHcOY'

CREDENTIALS_FILE = 'credentials.json'

# ----------------- GOOGLE SHEET SETUP ------------------
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(GOOGLE_SHEET_KEY).sheet1

# –ö—ç—à –Ω–∞ 10 –º–∏–Ω—É—Ç
products_cache = TTLCache(maxsize=1, ttl=600)

def find_product_by_code_or_name(query):
    # –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    if "force_refresh" in query:
        products_cache.clear()

    cached_data = products_cache.get("products")
    if not cached_data:
        data = sheet.get_all_values()
        products_cache["products"] = data 
        cached_data = data
    
    results = []
    for row in cached_data[1:]:
        if len(row) >= 6:
            code = row[4].strip()
            name = row[5].strip()
            if query.lower() in code.lower() or query.lower() in name.lower():
                results.append((code, name))
    return results

# ----------------- DATABASE SETUP ------------------
conn = sqlite3.connect("data.db", check_same_thread=False)
c = conn.cursor()
c.execute("""
    CREATE TABLE IF NOT EXISTS supplier_orders (
        order_id TEXT,
        date TEXT,
        supplier TEXT,
        product_name TEXT,
        product_code TEXT,
        quantity INTEGER,
        unit_price REAL,
        total_price REAL,
        serials TEXT
    )
""")

c.execute("""
    CREATE TABLE IF NOT EXISTS client_orders (
        order_id TEXT,
        date TEXT,
        client TEXT,
        product_name TEXT,
        quantity INTEGER,
        unit_price REAL,
        total_price REAL,
        serials TEXT,
        supplier_order_id TEXT
    )
""")

c.execute("""
    CREATE TABLE IF NOT EXISTS warehouse (
        serial TEXT PRIMARY KEY,
        product_name TEXT,
        supplier_order_id TEXT,
        client_order_id TEXT,
        unit_price REAL
    )
""")

c.execute("CREATE INDEX IF NOT EXISTS idx_serial ON warehouse(serial)")

c.execute("""
    CREATE TABLE IF NOT EXISTS cash (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT NOT NULL,
        cash REAL DEFAULT 0,
        expense REAL DEFAULT 0,
        comment TEXT
    )
""")
conn.commit()

# ---------------- KEYBOARDS ------------------
def date_choice_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="today")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data="other_date")]
    ])

def confirm_add_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_more")],
        [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="finish")]
    ])

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def main_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì¶ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É", callback_data="create_order_supplier"),
            InlineKeyboardButton(text="üì§ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç—É", callback_data="create_order_client")
        ],
        [
            InlineKeyboardButton(text="üè≠ –°–∫–ª–∞–¥", callback_data="warehouse"),
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞", callback_data="order_search")
        ],
        [
            InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç", callback_data="report"),
            InlineKeyboardButton(text="üí∞ –ö–∞—Å—Å–∞", callback_data="cashbox")
        ]
    ])

def cancel_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def order_actions_kb(order_id: str, order_type: str, has_serials: bool):
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                callback_data=f"edit_{order_type}_{order_id}"
            ),
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                callback_data=f"delete_{order_type}_{order_id}"
            )
        ]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤
    if not has_serials:
        buttons.insert(0, [
            InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–π–Ω–∏–∫–∏",
                callback_data=f"add_serials_{order_type}_{order_id}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    buttons.append([
        InlineKeyboardButton(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            callback_data="main_menu"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


from telegram.ext import CallbackQueryHandler, filters

def cancel_callback(update, context):
    # –¢–≤–æ–π –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã
    update.callback_query.answer()
    update.callback_query.edit_message_text("–û—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

cancel_handler = CallbackQueryHandler(
    cancel_callback,
    pattern='^cancel$'  # —Ñ–∏–ª—å—Ç—Ä –¥–ª—è callback_data —Å —Ç–æ—á–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º "cancel"
)

# –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª KEYBOARDS
def confirm_delete_kb(order_id: str, order_type: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –î–∞", 
                callback_data=f"confirm_delete_{order_type}_{order_id}"
            ),
            InlineKeyboardButton(
                text="‚ùå –ù–µ—Ç", 
                callback_data="cancel_delete"
            )
        ]
    ])


# ---------------- STATES ------------------
class OrderSupplier(StatesGroup):
    choosing_date = State()
    entering_custom_date = State()
    choosing_supplier = State()
    entering_product = State()
    entering_quantity = State()
    entering_price = State()
    entering_serials = State()
    confirming_add = State()
    choosing_serial_input = State()

class OrderClient(StatesGroup):
    choosing_date = State()
    entering_custom_date = State()
    entering_client = State()
    entering_product = State()
    entering_quantity = State()
    entering_price = State()
    entering_serials = State()
    choosing_supplier_order = State()
    confirming_add = State()

class WarehouseState(StatesGroup):
    viewing = State()

class SearchOrderState(StatesGroup):
    choosing_type = State()
    entering_query = State()
    entering_serial = State() 
    entering_product = State()

class ReportState(StatesGroup):
    choosing_type = State()
    entering_period = State()
    entering_date_end = State()

class CashState(StatesGroup):
    choosing_action = State()
    entering_income = State()
    entering_expense_date = State()
    entering_expense_reason = State()
    entering_expense_amount = State()
    entering_report_date = State()

class DeleteOrderState(StatesGroup):
    confirm_delete = State()

class OrderClientType(StatesGroup):
    choosing_type = State()

class EditingOrder(StatesGroup):
    choosing_field = State()
    changing_date = State()
    changing_counterparty = State()
    choosing_product_action = State()
    selecting_product = State()
    changing_quantity = State()
    removing_serials = State()
    adding_serials = State()
    changing_price = State()
    confirming_changes = State()


class AddSerialState(StatesGroup):
    entering_serials = State()

# ---------------- STORAGE ------------------
temp_storage = {}

# ---------------- ROUTER ------------------
router = Router()

@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    temp_storage.pop(message.from_user.id, None)
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu_kb())

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

from aiogram import Dispatcher
from aiogram.exceptions import TelegramAPIError
from aiogram.types import Update

@router.errors()
async def error_handler(update: Update, exception: Exception):  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä exception
    error_message = (
        f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n"
        f"‚Ä¢ –¢–∏–ø: {type(exception).__name__}\n"
        f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {str(exception)}"
    )
    
    if update.message:
        await update.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())
    elif update.callback_query:
        await update.callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())
    
    logging.error(error_message)
    return True


@router.callback_query(F.data == "cancel")
async def cancel_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    temp_storage.pop(user_id, None)  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())

from datetime import datetime

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
def get_current_date():
    return datetime.now().strftime("%d.%m.%Y")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
@router.callback_query(F.data == "create_order_supplier")
async def create_supplier_order(callback: CallbackQuery, state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    current_date = get_current_date()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω–∞ –ª–∏ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞
    client_order_data = await state.get_data()
    if "client_order_data" in client_order_data:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        await state.update_data(date=current_date)
        await callback.message.edit_text(f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {current_date}")
    else:
        # –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –¥–∞—Ç—ã
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞:", reply_markup=date_choice_kb())
        await state.set_state(OrderSupplier.choosing_date)

@router.callback_query(F.data == "create_order_client")
async def create_client_order(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É", callback_data="client_by_serial"),
         InlineKeyboardButton(text="–í—Ä—É—á–Ω—É—é", callback_data="client_manual")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await callback.message.edit_text("üîò –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=keyboard)
    await state.set_state(OrderClientType.choosing_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data == "client_by_serial", OrderClientType.choosing_type)
async def handle_client_by_serial(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderClient.entering_serials)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")

@router.message(OrderClient.entering_serials)
async def process_serials(message: Message, state: FSMContext):
    serials = [s.strip() for s in message.text.split(",")]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤
    c.execute("""
        SELECT product_name, supplier_order_id 
        FROM warehouse 
        WHERE serial IN ({}) 
        AND client_order_id IS NULL
    """.format(",".join(["?"]*len(serials))), serials)
    
    items = c.fetchall()
    
    if len(items) != len(serials):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É", callback_data="create_supplier_from_client")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–∏–π–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –ø—Ä–æ–¥–∞–Ω—ã", reply_markup=keyboard)
        await state.update_data(saved_serials=serials)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–π–Ω–∏–∫–∏
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
    products = {}
    for product, supplier_id in items:
        if product not in products:
            products[product] = {}
        if supplier_id not in products[product]:
            products[product][supplier_id] = 0
        products[product][supplier_id] += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    order_data = {
        "items": [],
        "serials": serials
    }
    for product, suppliers in products.items():
        for sid, qty in suppliers.items():
            order_data["items"].append({
                "product_name": product,
                "quantity": qty,
                "supplier_order_id": sid,
                "serials": [s for s in serials if s in [i[0] for i in items if i[1] == sid]]
            })
    
    await state.update_data(**order_data)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:")
    await state.set_state(OrderClient.entering_price)

@router.callback_query(F.data == "client_manual", OrderClientType.choosing_type)
async def handle_client_manual(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderClient.choosing_date)
    order_id = "OC" + datetime.now().strftime("%Y%m%d%H%M%S")
    user_id = callback.from_user.id
    temp_storage[user_id] = {"order_id": order_id, "items": []}
    await callback.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=date_choice_kb())

@router.callback_query(F.data == "warehouse")
async def show_warehouse(callback: CallbackQuery):
    c.execute("""
        SELECT product_name, COUNT(*) FROM warehouse
        WHERE client_order_id IS NULL
        GROUP BY product_name
    """)
    rows = c.fetchall()
    
    if not rows:
        await callback.message.edit_text("üì¶ –°–∫–ª–∞–¥ –ø—É—Å—Ç", reply_markup=main_menu_kb())
        return
    
    text = "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n" + "\n".join(
        f"- {product}: {count} —à—Ç." for product, count in rows
    )
    await callback.message.edit_text(text, reply_markup=main_menu_kb())

@router.callback_query(F.data == "order_search")
async def search_order(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SearchOrderState.choosing_type)
    await callback.message.edit_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", 
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üî¢ –ü–æ –Ω–æ–º–µ—Ä—É", callback_data="search_by_id"),
             InlineKeyboardButton(text="üìÖ –ü–æ –¥–∞—Ç–µ", callback_data="search_by_date")],
            [InlineKeyboardButton(text="üè∑Ô∏è –ü–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É", callback_data="search_by_serial"),
             InlineKeyboardButton(text="üì¶ –ü–æ —Ç–æ–≤–∞—Ä—É", callback_data="search_by_product")],
            [InlineKeyboardButton(text="üö´ –ë–µ–∑ —Å–µ—Ä–∏–π–Ω–∏–∫–∞", callback_data="search_no_serial")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
@router.callback_query(F.data == "order_search")
async def back_to_search(callback: CallbackQuery, state: FSMContext):
    await search_order(callback, state)  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞

@router.callback_query(F.data == "search_no_serial")
async def search_no_serial(callback: CallbackQuery):
    c.execute("""
        SELECT 'supplier', order_id, date, supplier, product_name 
        FROM supplier_orders 
        WHERE serials = '' OR serials IS NULL
        UNION
        SELECT 'client', order_id, date, client, product_name 
        FROM client_orders 
        WHERE serials = '' OR serials IS NULL
    """)
    results = c.fetchall()
    
    if not results:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="order_search")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback.message.edit_text("üö´ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤", reply_markup=keyboard)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{otype} {oid}",
            callback_data=f"open_{otype}_{oid}"
        )] for otype, oid, *_ in results
    ])
    await callback.message.edit_text("–ó–∞–∫–∞–∑—ã –±–µ–∑ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:", reply_markup=keyboard)

@router.callback_query(F.data == "report")
async def generate_report(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ReportState.choosing_type)
    await callback.message.edit_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data="report_period")],
        [InlineKeyboardButton(text="–ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="report_today")]
    ]))

@router.callback_query(F.data == "cashbox")
async def handle_cashbox(callback: CallbackQuery, state: FSMContext):
    await cashbox_menu(callback, state)

async def cashbox_menu(callback: CallbackQuery, state: FSMContext):
    # –†–∞—Å—á–µ—Ç —Å–≤–æ–¥–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().strftime("%d.%m.%Y")
    
    # –ù–∞–ª–∏—á–Ω—ã–µ (–ø—Ä–∏—Ö–æ–¥ - —Ä–∞—Å—Ö–æ–¥)
    c.execute("SELECT SUM(cash) - SUM(expense) FROM cash WHERE date = ?", (today,))
    cash_balance = c.fetchone()[0] or 0
    
    # –í —Ç–æ–≤–∞—Ä–µ (—Å—É–º–º–∞ unit_price –Ω–∞ —Å–∫–ª–∞–¥–µ)
    c.execute("SELECT SUM(unit_price) FROM warehouse WHERE client_order_id IS NULL")
    in_stock = c.fetchone()[0] or 0
    
    # –†–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å
    c.execute("SELECT SUM(expense) FROM cash WHERE date = ?", (today,))
    expenses = c.fetchone()[0] or 0
    
    # –ò—Ç–æ–≥–æ
    total = cash_balance + in_stock - expenses
    
    text = (
        f"üí∞ –ö–∞—Å—Å–∞ –Ω–∞ {today}:\n\n"
        f"‚Ä¢ –ù–∞–ª–∏—á–Ω—ã–µ: {cash_balance}‚ÇΩ\n"
        f"‚Ä¢ –í —Ç–æ–≤–∞—Ä–µ: {in_stock}‚ÇΩ\n"
        f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {expenses}‚ÇΩ\n"
        f"‚ûñ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥", callback_data="cash_expense")],
            [InlineKeyboardButton(text="üìÖ –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å", callback_data="cash_day_report")],
            [InlineKeyboardButton(text="üìù –£–∫–∞–∑–∞—Ç—å –Ω–∞–ª–∏—á–Ω—ã–µ", callback_data="set_cash_balance")],
            [InlineKeyboardButton(text="üìÜ –û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º", callback_data="cash_month_report")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await state.set_state(CashState.choosing_action)

@router.callback_query(F.data == "set_cash_balance")
async def ask_cash_amount(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è:")
    await state.set_state(CashState.setting_cash)

@router.message(CashState.setting_cash)
async def save_cash_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        date_str = datetime.now().strftime("%d.%m.%Y")

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É/–ë–î
        c.execute("DELETE FROM cash WHERE date = ? AND comment = '–ù–∞–ª–∏—á–Ω—ã–µ –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è'", (date_str,))
        c.execute("INSERT INTO cash (date, cash, comment) VALUES (?, ?, ?)", (date_str, amount, '–ù–∞–ª–∏—á–Ω—ã–µ –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è'))
        conn.commit()

        await message.answer("‚úÖ –ù–∞–ª–∏—á–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=cancel_kb())
        await state.clear()
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –í–Ω–µ—Å–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
@router.callback_query(F.data == "cash_expense")
async def start_expense(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(CashState.entering_expense_date)

@router.message(CashState.entering_expense_date)
async def expense_date_entered(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(expense_date=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å —Ä–∞—Å—Ö–æ–¥–∞:")
        await state.set_state(CashState.entering_expense_reason)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

@router.message(CashState.entering_expense_reason)
async def expense_reason_entered(message: Message, state: FSMContext):
    await state.update_data(expense_reason=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    await state.set_state(CashState.entering_expense_amount)

@router.message(CashState.entering_expense_amount)
async def expense_amount_entered(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        data = await state.get_data()
        c.execute("""
            INSERT INTO cash (date, expense, comment)
            VALUES (?, ?, ?)
        """, (data["expense_date"], amount, data["expense_reason"]))
        conn.commit()
        await message.answer("‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")

# –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å
@router.callback_query(F.data == "cash_day_report")
async def cash_day_report(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(CashState.entering_report_date)

@router.message(CashState.entering_report_date)
async def cash_day_report_generate(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y").strftime("%d.%m.%Y")
        c.execute("""
            SELECT comment, expense FROM cash 
            WHERE date = ? AND expense > 0
        """, (date,))
        expenses = c.fetchall()
        
        if not expenses:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="cash_retry_day_report")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await message.answer("üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.", reply_markup=keyboard)
            return
            
        total = sum(e[1] for e in expenses)
        text = f"üìä –û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –∑–∞ {date}:\n\n"
        text += "\n".join([f"‚Ä¢ {e[0]}: {e[1]}‚ÇΩ" for e in expenses])
        text += f"\n\nüí∏ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
        
        await message.answer(text)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")

@router.callback_query(F.data == "cash_retry_day_report")
async def retry_day_report(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(CashState.entering_report_date)
    await callback.answer()

# –û—Ç—á–µ—Ç –ø–æ –º–µ—Å—è—Ü–∞–º
@router.callback_query(F.data == "cash_month_report")
async def cash_month_report(callback: CallbackQuery):
    c.execute("""
        SELECT strftime('%Y-%m', date) as month 
        FROM cash 
        WHERE expense > 0 
        GROUP BY month
    """)
    months = c.fetchall()
    if not months:
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö")
        return
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{m[0]}", callback_data=f"cash_month_{m[0]}")] for m in months
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=kb)

@router.callback_query(F.data.startswith("cash_month_"))
async def cash_month_report_details(callback: CallbackQuery):
    month = callback.data.split("_")[-1]
    c.execute("""
        SELECT date, comment, expense 
        FROM cash 
        WHERE strftime('%Y-%m', date) = ? AND expense > 0
    """, (month,))
    expenses = c.fetchall()
    
    text = f"üìÜ –û—Ç—á–µ—Ç –∑–∞ {month}:\n\n"
    total = 0
    for date, reason, amount in expenses:
        text += f"‚Ä¢ {date}: {reason} ‚Äî {amount}‚ÇΩ\n"
        total += amount
    text += f"\nüí∏ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    
    await callback.message.edit_text(text, reply_markup=main_menu_kb())

@router.callback_query(F.data.startswith("add_serial_"))
async def start_adding_serial(callback: CallbackQuery, state: FSMContext):
    try:
        _, order_type, order_id = callback.data.split("_", 2)
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞
        table = "supplier_orders" if order_type == "supplier" else "client_orders"
        c.execute(f"SELECT 1 FROM {table} WHERE order_id = ?", (order_id,))
        if not c.fetchone():
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            return
        await state.update_data(order_type=order_type, order_id=order_id)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(AddSerialState.entering_serials)
    except Exception as e:
        logging.error(f"Serial add error: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

@router.message(AddSerialState.entering_serials)
async def process_adding_serials(message: Message, state: FSMContext):
    data = await state.get_data()
    serials = [s.strip() for s in message.text.split(",") if s.strip()]
    
    if not serials:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤ –ø—É—Å—Ç!")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤
    if any(not sn.isalnum() for sn in serials):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∑–∞–∫–∞–∑–∞—Ö
    conflicts = check_serials_usage(serials)
    if conflicts:
        await message.answer(f"‚ùå –°–µ—Ä–∏–π–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∑–∞–∫–∞–∑–∞—Ö: {', '.join(conflicts)}")
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        if data["order_type"] == "supplier":
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            c.execute("UPDATE supplier_orders SET serials = ? WHERE order_id = ?",
                     (",".join(serials), data["order_id"]))
            for sn in serials:
                c.execute("""INSERT OR REPLACE INTO warehouse 
                           VALUES (?, ?, ?, NULL, ?)""",
                         (sn, "", data["order_id"], 0.0))
        else:
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            c.execute("UPDATE client_orders SET serials = ? WHERE order_id = ?",
                     (",".join(serials), data["order_id"]))
        
        conn.commit()
        await message.answer("‚úÖ –°–µ—Ä–∏–π–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    await state.clear()

# –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_menu_kb())

# ---------------- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É ------------------

@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É")
async def start_supplier_order(message: Message, state: FSMContext):
    order_id = "OP" + datetime.now().strftime("%Y%m%d%H%M%S")
    temp_storage[message.from_user.id] = {"order_id": order_id, "items": []}
    await state.set_state(OrderSupplier.choosing_date)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞:", reply_markup=date_choice_kb())

@router.callback_query(F.data.in_({"today", "other_date"}), OrderSupplier.choosing_date)
async def supplier_order_date_choice(callback: CallbackQuery, state: FSMContext):
    if callback.data == "today":
        date_str = datetime.now().strftime("%d.%m.%Y")
        await state.update_data(date=date_str)
        await callback.message.edit_text(f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {date_str}")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", reply_markup=cancel_kb())
        await state.set_state(OrderSupplier.choosing_supplier)
    else:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:", reply_markup=cancel_kb())
        await state.set_state(OrderSupplier.entering_custom_date)

@router.message(OrderSupplier.entering_custom_date)
async def custom_date_entered(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(date=message.text)
        await message.answer(f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.text}\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", reply_markup=cancel_kb())
        await state.set_state(OrderSupplier.choosing_supplier)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")

@router.message(OrderSupplier.choosing_supplier)
async def supplier_name_entered(message: Message, state: FSMContext):
    await state.update_data(supplier=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderSupplier.entering_product)

@router.message(OrderSupplier.entering_product)
async def product_entered(message: Message, state: FSMContext):
    query = message.text.strip()
    results = find_product_by_code_or_name(query)
    if not results:
        await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:")
        return
    if len(results) > 1:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{code} - {name}", callback_data=f"product_{code}")]
                for code, name in results
            ]
        )
        await message.answer("–ù–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã. –í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=keyboard)
        return
    code, name = results[0]
    await state.update_data(product_code=code, product_name=name)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {name} (–∫–æ–¥: {code})\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderSupplier.entering_quantity)

@router.callback_query(F.data.startswith("product_"), OrderSupplier.entering_product)
async def product_selected(callback: CallbackQuery, state: FSMContext):
    code = callback.data[8:]
    results = find_product_by_code_or_name(code)
    if not results:
        await callback.message.edit_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        await state.set_state(OrderSupplier.entering_product)
        return
    _, name = results[0]
    await state.update_data(product_code=code, product_name=name)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {name} (–∫–æ–¥: {code})\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderSupplier.entering_quantity)

@router.message(OrderSupplier.entering_quantity)
async def quantity_entered(message: Message, state: FSMContext):
    try:
        qty = int(message.text.strip())
        if qty < 1:
            raise ValueError()
        await state.update_data(quantity=qty)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —à—Ç—É–∫—É (‚ÇΩ):", reply_markup=cancel_kb())
        await state.set_state(OrderSupplier.entering_price)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0):")

@router.message(OrderSupplier.entering_price)
async def price_entered(message: Message, state: FSMContext):
    try:
        price = float(message.text.strip().replace(",", "."))
        if price <= 0:
            raise ValueError()
        await state.update_data(unit_price=price)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –≤–≤–æ–¥–∞ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ —Å–µ–π—á–∞—Å", callback_data="enter_serials_now")],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ", callback_data="enter_serials_later")]
        ])
        await message.answer("–•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å–µ–π—á–∞—Å?", reply_markup=keyboard)
        await state.set_state(OrderSupplier.choosing_serial_input)
        
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ > 0):")

@router.callback_query(F.data.in_(["enter_serial_now", "enter_serial_later"]), OrderSupplier.choosing_serial_input)
async def handle_serial_choice(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    user_id = callback.from_user.id
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    user_data = temp_storage.get(user_id, {})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Ä–∞–º–∫–∞—Ö –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞
    is_embedded = "client_order_data" in user_data
    
    if callback.data == "enter_serial_now" or is_embedded:
        # –†–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤ (–¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤
        temp_storage[user_id] = {
            "current_serials": [], # –¢–µ–∫—É—â–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–π–Ω–∏–∫–∏
            "expected_serials": data["quantity"], # –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            "items": user_data.get("items", []) # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        }
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (–æ—Å—Ç–∞–ª–æ—Å—å {data['quantity']}):",
            reply_markup=cancel_kb() # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        )
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤
        await state.set_state(OrderSupplier.entering_serials)
        
    else:
        # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–µ–∑ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤ (–æ–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∑–∞–∫–∞–∑–∞ –±–µ–∑ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤
        item = {
            "product_code": data["product_code"],
            "product_name": data["product_name"],
            "quantity": data["quantity"],
            "unit_price": data["unit_price"],
            "total_price": data["quantity"] * data["unit_price"],
            "serials": [] # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        temp_storage[user_id]["items"].append(item)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        await callback.message.answer(
            "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤.", 
            reply_markup=confirm_add_kb() # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–ø—Ü–∏—è–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        )
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        await state.set_state(OrderSupplier.confirming_add)

@router.callback_query(F.data.in_(["enter_serials_now", "enter_serials_later"]), OrderSupplier.choosing_serial_input)
async def handle_serial_choice(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    
    # –î–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if "client_order_data" in temp_storage.get(user_id, {}):
        temp_storage[user_id].update({
            "order_id": temp_storage[user_id].get("order_id"),
            "date": datetime.now().strftime("%d.%m.%Y"),
            "supplier": data.get("supplier", "")
        })
    
    if callback.data == "enter_serials_now":
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤
        temp_storage[user_id] = {
            "current_serials": [],
            "expected_serials": data["quantity"],
            "items": temp_storage.get(user_id, {}).get("items", [])
        }
        await callback.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (–æ—Å—Ç–∞–ª–æ—Å—å {data['quantity']}):",
            reply_markup=cancel_kb()
        )
        await state.set_state(OrderSupplier.entering_serials)
    else:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ"
        item = {
            "product_code": data["product_code"],
            "product_name": data["product_name"],
            "quantity": data["quantity"],
            "unit_price": data["unit_price"],
            "total_price": data["quantity"] * data["unit_price"],
            "serials": []
        }
        temp_storage[user_id]["items"].append(item)
        await callback.message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤.", reply_markup=confirm_add_kb())
        await state.set_state(OrderSupplier.confirming_add)

@router.message(OrderSupplier.entering_serials)
async def process_serial_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = temp_storage[user_id]
    sn = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –î—É–±–ª–∏–∫–∞—Ç –≤ —Ç–µ–∫—É—â–µ–º –≤–≤–æ–¥–µ
    if sn in user_data["current_serials"]:
        await message.answer("‚ùå –≠—Ç–æ—Ç —Å–µ—Ä–∏–π–Ω–∏–∫ —É–∂–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ
    c.execute("""
        SELECT serial FROM warehouse 
        WHERE serial = ? 
        UNION 
        SELECT serials FROM (
            SELECT serials FROM supplier_orders 
            UNION 
            SELECT serials FROM client_orders
        ) 
        WHERE ',' || serials || ',' LIKE '%,' || ? || ',%'
    """, (sn, sn))
    
    if c.fetchone():
        await message.answer("‚ùå –≠—Ç–æ—Ç —Å–µ—Ä–∏–π–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–∏–π–Ω–∏–∫
    user_data["current_serials"].append(sn)
    remaining = user_data["expected_serials"] - len(user_data["current_serials"])
    
    if remaining > 0:
        await message.answer(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. –û—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏: {remaining}")
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä —Å —Å–µ—Ä–∏–π–Ω–∏–∫–∞–º–∏
        data = await state.get_data()
        item = {
            "product_code": data["product_code"],
            "product_name": data["product_name"],
            "quantity": data["quantity"],
            "unit_price": data["unit_price"],
            "total_price": data["quantity"] * data["unit_price"],
            "serials": user_data["current_serials"]
        }
        user_data["items"].append(item)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del user_data["current_serials"]
        del user_data["expected_serials"]
        
        await message.answer("‚úÖ –í—Å–µ —Å–µ—Ä–∏–π–Ω–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–∫–∞–∑.", 
                           reply_markup=confirm_add_kb())
        await state.set_state(OrderSupplier.confirming_add)

@router.message(OrderSupplier.entering_price)
async def process_price(message: Message, state: FSMContext):
    try:
        price = float(message.text.replace(",", ".").strip())
        if price <= 0:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(price=price)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã
        data = await state.get_data()
        quantity = data.get("quantity", 0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
        total_price = price * quantity
        await state.update_data(total_price=total_price)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
        order_summary = (
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
            f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {data.get('supplier', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–¢–æ–≤–∞—Ä: {data.get('product_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            f"–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {price}‚ÇΩ\n"
            f"–û–±—â–∞—è —Å—É–º–º–∞: {total_price}‚ÇΩ\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:"
        )
        
        await message.answer(
            order_summary,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
                ]
            ])
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        await state.set_state(OrderSupplier.confirming_add)
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500 –∏–ª–∏ 1500.50).")


@router.callback_query(F.data == "add_more", OrderSupplier.confirming_add)
async def add_more_product(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderSupplier.entering_product)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@router.callback_query(F.data == "finish", OrderSupplier.confirming_add)
async def finish_supplier_order(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    order_data = temp_storage.get(user_id, {})
    data = await state.get_data()
    required_fields = ["date", "supplier", "product_code"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞
    client_order_data = order_data.get("client_order_data")
    if client_order_data:
        order_data.update({
            "order_id": order_data.get("order_id"),
            "items": order_data.get("items", []),
            "date": datetime.now().strftime("%d.%m.%Y"),  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞
            "supplier": order_data.get("supplier", "")
        })
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not order_data.get("order_id") or not order_data.get("items", []):
        await callback.message.edit_text(
            "‚ùå –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.",
            reply_markup=main_menu_kb()
        )
        await state.clear()
        return

    data = await state.get_data()
    date = data.get("date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    supplier = data.get("supplier", "–ù–µ —É–∫–∞–∑–∞–Ω")
    order_id = order_data["order_id"]

    total_order_price = 0
    for item in order_data["items"]:
        serials_str = ",".join(item["serials"])
        total_order_price += item["total_price"]
        c.execute("""
            INSERT INTO supplier_orders (order_id, date, supplier, product_name, product_code, quantity, unit_price, total_price, serials)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (order_id, date, supplier, item["product_name"], item["product_code"], item["quantity"], item["unit_price"], item["total_price"], serials_str))
        for sn in item["serials"]:
            c.execute("""
                INSERT OR IGNORE INTO warehouse (serial, product_name, supplier_order_id, client_order_id, unit_price)
                VALUES (?, ?, ?, NULL, ?)
            """, (sn, item["product_name"], order_id, item["unit_price"]))
    conn.commit()

    text = f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É —Å–æ–∑–¥–∞–Ω:\n\n–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {date}\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n–ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier}\n\n"
    for idx, item in enumerate(order_data["items"], 1):
        text += (f"{idx}. {item['product_name']} ({item['product_code']})\n"
                 f"   –¶–µ–Ω–∞ –∑–∞ —à—Ç: {item['unit_price']}‚ÇΩ\n"
                 f" –ö–æ–ª-–≤–æ: {item['quantity']}\n"
                 f" –°—Ç–æ–∏–º–æ—Å—Ç—å: {item['total_price']}‚ÇΩ\n"
                 f" –°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(item['serials'])}\n\n")
        text += f"<b>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {total_order_price}‚ÇΩ"
        temp_storage.pop(user_id, None)
    await state.clear()
    await callback.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=main_menu_kb())

# ---------------- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç—É ------------------

@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç—É")
async def start_client_order(message: Message, state: FSMContext):
    order_id = "OC" + datetime.now().strftime("%Y%m%d%H%M%S")
    temp_storage[message.from_user.id] = {"order_id": order_id, "items": []}
    await state.set_state(OrderClient.choosing_date)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=date_choice_kb())

@router.callback_query(F.data.in_({"today", "other_date"}), OrderClient.choosing_date)
async def client_order_date_choice(callback: CallbackQuery, state: FSMContext):
    if callback.data == "today":
        date_str = datetime.now().strftime("%d.%m.%Y")
        await state.update_data(date=date_str)
        await callback.message.edit_text(f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞: {date_str}")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=cancel_kb())
        await state.set_state(OrderClient.entering_client)
    else:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:", reply_markup=cancel_kb())
        await state.set_state(OrderClient.entering_custom_date)

@router.message(OrderClient.entering_custom_date)
async def client_custom_date_entered(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(date=message.text)
        await message.answer(f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.text}\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=cancel_kb())
        await state.set_state(OrderClient.entering_client)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")

@router.message(OrderClient.entering_client)
async def client_name_entered(message: Message, state: FSMContext):
    await state.update_data(client=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderClient.entering_product)

@router.message(OrderClient.entering_product)
async def client_product_entered(message: Message, state: FSMContext):
    query = message.text.strip()
    results = find_product_by_code_or_name(query)
    if not results:
        await message.answer(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É", callback_data="create_order_supplier")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return
    if len(results) > 1:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{code} - {name}", callback_data=f"client_product_{code}")]
                for code, name in results
            ]
        )
        await message.answer("–ù–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã. –í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=keyboard)
        return
    code, name = results[0]
    await state.update_data(product_code=code, product_name=name)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {name} (–∫–æ–¥: {code})\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderClient.entering_quantity)

@router.callback_query(F.data.startswith("client_product_"), OrderClient.entering_product)
async def client_product_selected(callback: CallbackQuery, state: FSMContext):
    code = callback.data[15:]
    results = find_product_by_code_or_name(code)
    if not results:
        await callback.message.edit_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        await state.set_state(OrderClient.entering_product)
        return
    _, name = results[0]
    await state.update_data(product_code=code, product_name=name)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {name} (–∫–æ–¥: {code})\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderClient.entering_quantity)

# –ü—Ä–∏–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@router.message(OrderClient.entering_quantity)
async def client_quantity_entered(message: Message, state: FSMContext):
    try:
        qty = int(message.text.strip())
        if qty < 1:
            raise ValueError()

        await state.update_data(quantity=qty)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ä—É—á–Ω—É—é, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è .append –Ω–∞ inline_keyboard
        kb = InlineKeyboardMarkup(inline_keyboard=
            cancel_kb().inline_keyboard +
            [[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        )

        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —à—Ç—É–∫—É (‚ÇΩ):", reply_markup=kb)
        await state.set_state(OrderClient.entering_price)

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:",
            reply_markup=cancel_kb()
        )


async def client_price_entered(message: Message, state: FSMContext):
    try:
        price = float(message.text.replace(",", ".").strip())
        if price <= 0:
            raise ValueError()

        await state.update_data(unit_price=price)
        data = await state.get_data()

        # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        item = {
            "product_name": data.get("product_name"),
            "quantity": data.get("quantity"),
            "unit_price": price,
            "total_price": data.get("quantity") * price,
            "serials": [],
            "supplier_order_id": ""
        }

        user_id = message.from_user.id
        if user_id in temp_storage:
            temp_storage[user_id]["items"].append(item)
        else:
            temp_storage[user_id] = {
                "order_id": "OC" + datetime.now().strftime("%Y%m%d%H%M%S"),
                "items": [item],
                "date": data.get("date", datetime.now().strftime("%d.%m.%Y")),
                "client": data.get("client", "–ù–µ —É–∫–∞–∑–∞–Ω")
            }

        supplier_link = f"open_supplier_{item['supplier_order_id']}" if item['supplier_order_id'] else "–ù–µ—Ç —Å–≤—è–∑–∏"

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–≤–æ–¥–∫–∞
        text = (
            f"üìã –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É –∫–ª–∏–µ–Ω—Ç–∞:\n"
            f"–î–∞—Ç–∞: {temp_storage[user_id]['date']}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {temp_storage[user_id]['client']}\n"
            f"–¢–æ–≤–∞—Ä: {item['product_name']}\n"
            f"–ö–æ–ª-–≤–æ: {item['quantity']} —à—Ç.\n"
            f"–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {item['unit_price']}‚ÇΩ\n"
            f"–ò—Ç–æ–≥–æ: {item['total_price']}‚ÇΩ\n"
            f"–°–≤—è–∑–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {'üîó –ü–æ–∫–∞–∑–∞—Ç—å' if item['supplier_order_id'] else '‚Äî'}"
        )

        keyboard = [
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="finish")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_more")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        if item['supplier_order_id']:
            keyboard.insert(1, [InlineKeyboardButton(text="üîó –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", callback_data=supplier_link)])

        await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await state.set_state(OrderClient.confirming_add)

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1000.00", reply_markup=cancel_kb())

@router.callback_query(F.data.startswith("choose_supplier_"), OrderClient.choosing_supplier_order)
async def client_choose_supplier(callback: CallbackQuery, state: FSMContext):
    supplier_order_id = callback.data[16:]
    user_id = callback.from_user.id
    data = await state.get_data()
    qty = data.get("quantity")
    product_name = data.get("product_name")
    unit_price = data.get("unit_price")
    client_name = data.get("client")
    date = data.get("date")
    order_id = temp_storage[user_id]["order_id"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    c.execute("""
        SELECT serial FROM warehouse
        WHERE product_name=? AND supplier_order_id=? AND client_order_id IS NULL
        LIMIT ?
    """, (product_name, supplier_order_id, qty))
    rows = c.fetchall()
    if len(rows) < qty:
        await callback.message.answer(f"–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_order_id}. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.")
        return

    serials = [r[0] for r in rows]
    total_price = qty * unit_price
    item = {
        "product_name": product_name,
        "quantity": qty,
        "unit_price": unit_price,
        "total_price": total_price,
        "serials": serials,
        "supplier_order_id": supplier_order_id
    }
    temp_storage[user_id]["items"].append(item)

    await callback.message.edit_text("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞.", reply_markup=confirm_add_kb())
    await state.set_state(OrderClient.confirming_add)

@router.callback_query(F.data == "add_more", OrderClient.confirming_add)
async def client_add_more_product(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderClient.entering_product)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@router.callback_query(F.data == "create_supplier_from_client")
async def create_supplier_from_client(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    temp_storage[user_id] = {
        "order_id": "OP" + datetime.now().strftime("%Y%m%d%H%M%S"),
        "items": [],
        "date": datetime.now().strftime("%d.%m.%Y"),  # –ê–≤—Ç–æ-–¥–∞—Ç–∞
        "client_order_data": (await state.get_data()).copy()
    }
    await state.set_state(OrderSupplier.choosing_supplier)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user_id not in temp_storage:
        temp_storage[user_id] = {}
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    temp_storage[user_id]["client_order_data"] = data
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
    order_id = "OP" + datetime.now().strftime("%Y%m%d%H%M%S")
    temp_storage[user_id] = {
        "order_id": order_id,
        "items": [],
        "date": datetime.now().strftime("%d.%m.%Y"),
        "client_order_data": data
    }

    await state.update_data(date=temp_storage[user_id]["date"])
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderSupplier.choosing_supplier)

@router.callback_query(F.data == "finish", OrderClient.confirming_add)
async def finish_client_order(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    order_data = temp_storage.get(user_id)
    if not order_data or not order_data.get("items"):
        await callback.message.edit_text("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.")
        await state.clear()
        return

    data = await state.get_data()
    date = data.get("date")
    client = data.get("client")
    order_id = order_data["order_id"]

    total_order_price = 0
    for item in order_data["items"]:
        serials_str = ",".join(item["serials"])
        total_order_price += item["total_price"]
        c.execute("""
            INSERT INTO client_orders (order_id, date, client, product_name, quantity, unit_price, total_price, serials, supplier_order_id)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (order_id, date, client, item["product_name"], item["quantity"], item["unit_price"], item["total_price"], serials_str, item["supplier_order_id"]))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–ª–∞–¥: —Å–≤—è–∑—ã–≤–∞–µ–º —Å–µ—Ä–∏–π–Ω–∏–∫–∏ —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º –∑–∞–∫–∞–∑–æ–º (–ø—Ä–æ–¥–∞–∂–µ–π)
        for sn in item["serials"]:
            c.execute("""
                UPDATE warehouse SET client_order_id=?
                WHERE serial=?
            """, (order_id, sn))
    conn.commit()

    text = f"‚úÖ –ó–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç—É —Å–æ–∑–¥–∞–Ω:\n\n–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {date}\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n–ö–ª–∏–µ–Ω—Ç: {client}\n\n"
    for idx, item in enumerate(order_data["items"], 1):
        text += (f"{idx}. {item['product_name']}\n"
                 f"   –¶–µ–Ω–∞ –∑–∞ —à—Ç: {item['unit_price']}‚ÇΩ\n"
                 f"   –ö–æ–ª-–≤–æ: {item['quantity']}\n"
                 f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {item['total_price']}‚ÇΩ\n"
                 f"   –°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(item['serials'])}\n"
                 f"   –ü–æ—Å—Ç–∞–≤—â–∏–∫ –∑–∞–∫–∞–∑–∞: {item['supplier_order_id']}\n\n")
    text += f"<b>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {total_order_price}‚ÇΩ"

    temp_storage.pop(user_id, None)
    await state.clear()
    await callback.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=main_menu_kb())

# ================ DATABASE HELPERS ================
async def get_order_from_db(order_id: str, order_type: str) -> dict:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        if order_type == "supplier":
            c.execute("""SELECT * FROM supplier_orders 
                      WHERE order_id = ?""", (order_id,))
        else:
            c.execute("""SELECT * FROM client_orders 
                      WHERE order_id = ?""", (order_id,))
        
        order = dict(zip([col[0] for col in c.description], c.fetchone()))
        order["items"] = []
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤
        c.execute("""SELECT serial FROM warehouse 
                  WHERE {} = ?""".format(
                      "supplier_order_id" if order_type == "supplier" 
                      else "client_order_id"
                  ), (order_id,))
        order["serials"] = [row[0] for row in c.fetchall()]
        return order
    except Exception as e:
        logging.error(f"Order fetch error: {str(e)}")
        return None

def update_supplier_order(order: dict):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –ë–î"""
    with conn:
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å
        c.execute("""UPDATE supplier_orders SET
            date = ?,
            supplier = ?,
            product_name = ?,
            product_code = ?,
            quantity = ?,
            unit_price = ?,
            total_price = ?,
            serials = ?
            WHERE order_id = ?""",
            (order['date'], order['supplier'], order['product_name'],
             order['product_code'], order['quantity'], order['unit_price'],
             order['total_price'], ','.join(order['serials']), order['order_id']))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–ª–∞–¥
        c.execute("DELETE FROM warehouse WHERE supplier_order_id = ?", (order['order_id'],))
        for item in order['items']:
            c.execute("""INSERT INTO warehouse 
                (serial, product_name, supplier_order_id, client_order_id, unit_price)
                VALUES (?, ?, ?, ?, ?)""",
                (item['serial'], item['product_name'], order['order_id'],
                 None, item['unit_price']))

def update_client_order(order: dict):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î"""
    with conn:
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å
        c.execute("""UPDATE client_orders SET
            date = ?,
            client = ?,
            product_name = ?,
            quantity = ?,
            unit_price = ?,
            total_price = ?,
            serials = ?,
            supplier_order_id = ?
            WHERE order_id = ?""",
            (order['date'], order['client'], order['product_name'],
             order['quantity'], order['unit_price'], order['total_price'],
             ','.join(order['serials']), order['supplier_order_id'], order['order_id']))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–ª–∞–¥
        c.execute("UPDATE warehouse SET client_order_id = NULL WHERE client_order_id = ?", 
                 (order['order_id'],))
        for serial in order['serials']:
            c.execute("UPDATE warehouse SET client_order_id = ? WHERE serial = ?",
                     (order['order_id'], serial))

def check_serials_usage(serials: list) -> list:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –∑–∞–∫–∞–∑–∞—Ö"""
    conflicting = []
    for sn in serials:
        c.execute("SELECT client_order_id FROM warehouse WHERE serial = ?", (sn,))
        result = c.fetchone()
        if result and result[0]:
            conflicting.append(result[0])
    return list(set(conflicting))

def compare_orders(original: dict, modified: dict) -> list:
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –≤–µ—Ä—Å–∏–π –∑–∞–∫–∞–∑–∞"""
    diff = []
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
    for field in ['date', 'supplier', 'client']:
        if original.get(field) != modified.get(field):
            diff.append((
                field.capitalize(),
                original.get(field, 'N/A'),
                modified.get(field, 'N/A')
            ))
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    orig_items = {(i['product_name'], i['serial']): i for i in original['items']}
    mod_items = {(i['product_name'], i['serial']): i for i in modified['items']}
    
    # –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    for key in orig_items.keys() - mod_items.keys():
        diff.append(('–£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä', f"{key[0]} ({key[1]})", '–£–¥–∞–ª–µ–Ω'))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    for key in mod_items.keys() - orig_items.keys():
        diff.append(('–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä', '–ù–æ–≤—ã–π', f"{key[0]} ({key[1]})"))
    
    # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    for key in orig_items.keys() & mod_items.keys():
        orig = orig_items[key]
        mod = mod_items[key]
        if orig['unit_price'] != mod['unit_price']:
            diff.append((
                f"–¶–µ–Ω–∞ {key[0]}",
                f"{orig['unit_price']}‚ÇΩ",
                f"{mod['unit_price']}‚ÇΩ"
            ))
    
    return diff

# ----------------- EDITING LOGIC ------------------
@router.callback_query(F.data.startswith("edit_"))
async def start_editing_order(callback: CallbackQuery, state: FSMContext):
    try:
        # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        parts = callback.data.split("_")
        if len(parts) != 3:
            raise ValueError
        order_type = parts[1]
        order_id = parts[2]
        
        order = get_order_from_db(order_id, order_type)
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        await state.update_data(
            original_order=order,
            order_type=order_type,
            order_id=order_id,
            modified_order=order.copy()
        )
        await show_editing_menu(callback.message, state)
    except Exception as e:
        logging.error(f"Edit error: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞")

async def show_editing_menu(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="edit_date")],
        [InlineKeyboardButton(text="üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞", callback_data="edit_counterparty")],
        [InlineKeyboardButton(text="üì¶ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="edit_products")],
        [InlineKeyboardButton(text="üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="edit_prices")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="finish_editing")]
    ])
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(EditingOrder.choosing_field)

# ------ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã ------
@router.callback_query(F.data == "edit_date", EditingOrder.choosing_field)
async def change_date(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(EditingOrder.changing_date)

@router.message(EditingOrder.changing_date)
async def process_new_date(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    try:
        datetime.strptime(message.text, "%d.%m.%Y")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    data = await state.get_data()
    data["modified_order"]["date"] = message.text
    await state.set_data(data)
    
    await message.answer("‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
    await show_editing_menu(message, state)

# ------ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ ------
@router.callback_query(F.data == "edit_counterparty", EditingOrder.choosing_field)
async def change_counterparty(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    counterparty_type = "–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞" if data["order_type"] == "supplier" else "–∫–ª–∏–µ–Ω—Ç–∞"
    
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è {counterparty_type}:")
    await state.set_state(EditingOrder.changing_counterparty)

@router.message(EditingOrder.changing_counterparty)
async def process_new_counterparty(message: Message, state: FSMContext):
    data = await state.get_data()
    field = "supplier" if data["order_type"] == "supplier" else "client"
    
    data["modified_order"][field] = message.text
    await state.set_data(data)
    
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    await show_editing_menu(message, state)

# ------ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ ------
@router.callback_query(F.data == "edit_products", EditingOrder.choosing_field)
async def edit_products_menu(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="remove_product")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="change_quantity")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_editing")]
    ])
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏:", reply_markup=keyboard)
    await state.set_state(EditingOrder.choosing_product_action)

# ------ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ------
@router.callback_query(F.data == "add_product", EditingOrder.choosing_product_action)
async def add_new_product(callback: CallbackQuery, state: FSMContext):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(OrderSupplier.entering_product)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞

# ------ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ------
@router.callback_query(F.data == "remove_product", EditingOrder.choosing_product_action)
async def remove_product_menu(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=item["product_name"], callback_data=f"remove_{idx}")]
        for idx, item in enumerate(data["modified_order"]["items"])
    ] + [[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_products")]])
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("remove_"))
async def confirm_product_removal(callback: CallbackQuery, state: FSMContext):
    product_idx = int(callback.data.split("_")[1])
    data = await state.get_data()
    product = data["modified_order"]["items"][product_idx]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    conflicted_orders = check_serials_usage(product["serials"])  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    if conflicted_orders:
        conflict_text = "\n".join([f"- {order_id}" for order_id in conflicted_orders])
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_removal")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data=f"force_remove_{product_idx}")]
        ])
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä. –°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∑–∞–∫–∞–∑–∞—Ö:\n{conflict_text}",
            reply_markup=keyboard
        )
        return
    
    await perform_product_removal(callback, state, product_idx)

def order_actions_kb(order_id: str, order_type: str, has_serials: bool):
    keyboard = [
        [
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{order_type}_{order_id}"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{order_type}_{order_id}")
        ],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    if not has_serials:
        keyboard.insert(1, [InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", 
            callback_data=f"add_serial_{order_type}_{order_id}"
        )])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def perform_product_removal(callback: CallbackQuery, state: FSMContext, product_idx: int):
    data = await state.get_data()
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ modified_order
    removed_item = data["modified_order"]["items"].pop(product_idx)
    
    # –£–¥–∞–ª—è–µ–º —Å–µ—Ä–∏–π–Ω–∏–∫–∏ –∏–∑ warehouse
    for sn in removed_item["serials"]:
        c.execute("DELETE FROM warehouse WHERE serial = ?", (sn,))
    
    conn.commit()
    
    await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    await edit_products_menu(callback, state)

# ------ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ------
@router.callback_query(F.data == "change_quantity", EditingOrder.choosing_product_action)
async def select_product_for_quantity(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=item["product_name"], callback_data=f"change_qty_{idx}")]
        for idx, item in enumerate(data["modified_order"]["items"])
    ] + [[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_products")]])
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("change_qty_"))
async def input_new_quantity(callback: CallbackQuery, state: FSMContext):
    product_idx = int(callback.data.split("_")[2])
    await state.update_data(editing_product_idx=product_idx)
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(EditingOrder.changing_quantity)

@router.message(EditingOrder.changing_quantity)
async def process_new_quantity(message: Message, state: FSMContext):
    try:
        new_qty = int(message.text)
        if new_qty < 1:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")
        return
    
    data = await state.get_data()
    product_idx = data["editing_product_idx"]
    product = data["modified_order"]["items"][product_idx]
    
    if new_qty > product["quantity"]:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤
        await state.update_data(required_serials=new_qty - product["quantity"])
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ {new_qty - product["quantity"]} –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:")
        await state.set_state(EditingOrder.adding_serials)
    elif new_qty < product["quantity"]:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤
        await state.update_data(serials_to_remove=product["quantity"] - new_qty)
        await show_serial_removal_menu(message, state, product["serials"])
    else:
        await message.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
        await show_editing_menu(message, state)

# ------ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ ------
async def show_serial_removal_menu(message: Message, state: FSMContext, serials: list):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=sn, callback_data=f"remove_sn_{sn}")]
        for sn in serials
    ])
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(EditingOrder.removing_serials)

@router.callback_query(F.data.startswith("remove_sn_"), EditingOrder.removing_serials)
async def process_serial_removal(callback: CallbackQuery, state: FSMContext):
    sn_to_remove = callback.data.split("_")[2]
    data = await state.get_data()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data["modified_order"]["items"][data["editing_product_idx"]]["serials"].remove(sn_to_remove)
    data["serials_to_remove"] -= 1
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    c.execute("DELETE FROM warehouse WHERE serial = ?", (sn_to_remove,))
    conn.commit()
    
    if data["serials_to_remove"] > 0:
        await show_serial_removal_menu(callback.message, state, 
            data["modified_order"]["items"][data["editing_product_idx"]]["serials"])
    else:
        await callback.message.answer("‚úÖ –°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        await show_editing_menu(callback.message, state)

# ------ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω ------
@router.callback_query(F.data == "edit_prices", EditingOrder.choosing_field)
async def select_product_for_price(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    if len(data["modified_order"]["items"]) == 1:
        await state.update_data(editing_product_idx=0)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:")
        await state.set_state(EditingOrder.changing_price)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=item["product_name"], callback_data=f"change_price_{idx}")]
            for idx, item in enumerate(data["modified_order"]["items"])
        ])
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("change_price_"))
async def input_new_price(callback: CallbackQuery, state: FSMContext):
    product_idx = int(callback.data.split("_")[2])
    await state.update_data(editing_product_idx=product_idx)
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:")
    await state.set_state(EditingOrder.changing_price)

@router.message(EditingOrder.changing_price)
async def process_new_price(message: Message, state: FSMContext):
    try:
        new_price = float(message.text.replace(",", "."))
        if new_price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return
    
    data = await state.get_data()
    product_idx = data["editing_product_idx"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
    data["modified_order"]["items"][product_idx]["unit_price"] = new_price
    data["modified_order"]["items"][product_idx]["total_price"] = (
        new_price * data["modified_order"]["items"][product_idx]["quantity"]
    )
    
    await state.set_data(data)
    await message.answer("‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await show_editing_menu(message, state)

# ------ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π ------
@router.callback_query(F.data == "finish_editing", EditingOrder.choosing_field)
async def confirm_changes(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    diff = compare_orders(data["original_order"], data["modified_order"])  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    
    text = "–ò–∑–º–µ–Ω–µ–Ω–∏—è:\n" + "\n".join(
        f"{field}: {old} ‚Üí {new}" 
        for field, old, new in diff
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_edit")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_edit")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(EditingOrder.confirming_changes)

@router.callback_query(F.data == "confirm_edit")
async def save_changes(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    try:
        if data["order_type"] == "supplier":
            update_supplier_order(data["modified_order"])
        else:
            update_client_order(data["modified_order"])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Å—Å—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω
        if any('–¶–µ–Ω–∞' in change[0] for change in compare_orders(data["original_order"], data["modified_order"])):
            update_cash_records(data["modified_order"])
        
        await callback.message.edit_text("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n" + get_order_summary(data["modified_order"]))
        await state.clear()
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
        await state.set_state(EditingOrder.confirming_changes)

def update_cash_records(order: dict):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞—Å—Å–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω"""
    if order['order_type'] == 'client':
        total_diff = order['total_price'] - get_order_from_db(order['order_id'], 'client')['total_price']
        if total_diff != 0:
            c.execute("""INSERT INTO cash (date, cash, comment)
                      VALUES (?, ?, ?)""",
                      (datetime.now().strftime("%d.%m.%Y"), 
                       total_diff, 
                       f"–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–∞ {order['order_id']}"))
            conn.commit()

def get_order_summary(order: dict) -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –∑–∞–∫–∞–∑—É"""
    summary = []
    if order['order_type'] == 'supplier':
        summary.append(f"üì¶ –ó–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É {order['order_id']}")
        summary.append(f"üìÖ –î–∞—Ç–∞: {order['date']}")
        summary.append(f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {order['supplier']}")
    else:
        summary.append(f"üì§ –ó–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç—É {order['order_id']}")
        summary.append(f"üìÖ –î–∞—Ç–∞: {order['date']}")
        summary.append(f"üë§ –ö–ª–∏–µ–Ω—Ç: {order['client']}")
    
    summary.append("\nüìã –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:")
    for item in order['items']:
        summary.append(f"‚Ä¢ {item['product_name']} ({item['serial']})")
        summary.append(f"  –ö–æ–ª-–≤–æ: {item['quantity']} —à—Ç.")
        summary.append(f"  –¶–µ–Ω–∞: {item['unit_price']}‚ÇΩ")
        summary.append(f"  –°—É–º–º–∞: {item['total_price']}‚ÇΩ\n")
    
    summary.append(f"üíµ –ò—Ç–æ–≥–æ: {sum(i['total_price'] for i in order['items'])}‚ÇΩ")
    return "\n".join(summary)



# ---------------- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∫–ª–∞–¥–∞ ------------------

@router.message(F.text == "–°–∫–ª–∞–¥")
async def show_warehouse(message: Message):
    c.execute("""
        SELECT product_name, COUNT(*) FROM warehouse
        WHERE client_order_id IS NULL
        GROUP BY product_name
    """)
    rows = c.fetchall()
    if not rows:
        await message.answer("–°–∫–ª–∞–¥ –ø—É—Å—Ç.")
        return
    text = "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n"
    for product_name, count in rows:
        text += f"- {product_name}: {count} —à—Ç.\n"
    await message.answer(text)

# ---------------- –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ ------------------

@router.message(F.text == "–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞")
async def search_order_start(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞", callback_data="search_by_id")],
        [InlineKeyboardButton(text="–ü–æ –¥–∞—Ç–µ –∑–∞–∫–∞–∑–∞", callback_data="search_by_date")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞:", reply_markup=keyboard)
    await state.set_state(SearchOrderState.choosing_type)

@router.callback_query(F.data == "search_by_id", SearchOrderState.choosing_type)
async def search_by_id_choice(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:")
    await state.set_state(SearchOrderState.entering_query)

@router.callback_query(F.data == "search_by_date", SearchOrderState.choosing_type)
async def search_by_date_choice(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")
    await state.set_state(SearchOrderState.entering_query)

@router.callback_query(F.data == "search_by_serial", SearchOrderState.choosing_type)
async def search_by_serial_choice(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üî¢ –í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:")
    await state.set_state(SearchOrderState.entering_serial)

@router.callback_query(F.data == "search_by_product", SearchOrderState.choosing_type)
async def search_by_product_choice(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(SearchOrderState.entering_product)

@router.message(SearchOrderState.entering_serial)
async def handle_serial_search(message: Message, state: FSMContext):
    serial = message.text.strip()
    await search_order_execute(message, state, search_type="serial", query=serial)

@router.message(SearchOrderState.entering_product)
async def handle_product_search(message: Message, state: FSMContext):
    product = message.text.strip()
    await search_order_execute(message, state, search_type="product", query=product)

# –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ SearchOrderState.entering_query
# –ò –∑–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏:

async def search_order_execute(message: Message, state: FSMContext, search_type: str, query: str):
    if search_type == "serial":
        await process_search_query(message, state, search_type, query)
    elif search_type == "product":
        await process_search_query(message, state, search_type, query)
    elif search_type == "id":
        await process_search_by_id_or_date(message, query)
    elif search_type == "date":
        await process_search_by_id_or_date(message, query)
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞")
    await state.clear()

@router.message(SearchOrderState.entering_serial)
async def handle_serial_search(message: Message, state: FSMContext):
    serial = message.text.strip()
    await search_order_execute(message, state, "serial", serial)

@router.message(SearchOrderState.entering_product)
async def handle_product_search(message: Message, state: FSMContext):
    product = message.text.strip()
    await search_order_execute(message, state, "product", product)

@router.message(SearchOrderState.entering_query)
async def handle_id_or_date_search(message: Message, state: FSMContext):
    query = message.text.strip()
    data = await state.get_data()
    search_type = data.get("search_type", "id")
    await search_order_execute(message, state, search_type, query)

# ----------------- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–û–ò–°–ö–ê ------------------
async def process_search_query(message: Message, state: FSMContext, search_type: str, query: str):
    results = []
    
    if search_type == "serial":
        c.execute("""
            SELECT 
                CASE 
                    WHEN w.client_order_id IS NOT NULL THEN '–ö–ª–∏–µ–Ω—Ç'
                    ELSE '–ü–æ—Å—Ç–∞–≤—â–∏–∫'
                END as order_type,
                COALESCE(s.order_id, c.order_id) as order_id,
                COALESCE(s.date, c.date) as date,
                COALESCE(s.supplier, c.client) as counterparty,
                w.product_name,
                1 as quantity,
                COALESCE(s.unit_price, c.unit_price) as unit_price
            FROM warehouse w
            LEFT JOIN supplier_orders s ON w.supplier_order_id = s.order_id
            LEFT JOIN client_orders c ON w.client_order_id = c.order_id
            WHERE w.serial = ?
        """, (query,))
        results = c.fetchall()
    
    elif search_type == "product":
        c.execute("""
            SELECT '–ü–æ—Å—Ç–∞–≤—â–∏–∫', order_id, date, supplier, product_name, quantity, total_price 
            FROM supplier_orders 
            WHERE product_name LIKE ?
            UNION
            SELECT '–ö–ª–∏–µ–Ω—Ç', order_id, date, client, product_name, quantity, total_price 
            FROM client_orders 
            WHERE product_name LIKE ?
        """, (f"%{query}%", f"%{query}%"))
        results = c.fetchall()
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not results:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="order_search")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.answer("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=kb)
        await state.clear()
        return
    
    text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
    for idx, (otype, oid, date, name, product, qty, total) in enumerate(results, 1):
        text += (f"{idx}. {otype}\n"
                 f"   –ù–æ–º–µ—Ä: {oid}\n"
                 f"   –î–∞—Ç–∞: {date}\n"
                 f"   –¢–æ–≤–∞—Ä: {product}\n"
                 f"   –ö–æ–ª-–≤–æ: {qty}\n"
                 f"   –°—É–º–º–∞: {total}‚ÇΩ\n\n")
    
    await message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"üìÑ –û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑ {oid}", 
                callback_data=f"open_{otype.lower()}_{oid}"
            )] for _, oid, *_ in results
        ] + [[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    )
    await state.clear()

async def process_search_by_id_or_date(message: Message, query: str):
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
    c.execute("""
        SELECT '–ü–æ—Å—Ç–∞–≤—â–∏–∫', order_id, date, supplier, product_name, quantity, total_price 
        FROM supplier_orders WHERE order_id = ?
        UNION
        SELECT '–ö–ª–∏–µ–Ω—Ç', order_id, date, client, product_name, quantity, total_price 
        FROM client_orders WHERE order_id = ?
    """, (query, query))
    
    results = c.fetchall()
    
    if not results:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ
        try:
            datetime.strptime(query, "%d.%m.%Y")
            c.execute("""
                SELECT '–ü–æ—Å—Ç–∞–≤—â–∏–∫', order_id, date, supplier, product_name, quantity, total_price
                FROM supplier_orders WHERE date = ?
                UNION
                SELECT '–ö–ª–∏–µ–Ω—Ç', order_id, date, client, product_name, quantity, total_price
                FROM client_orders WHERE date = ?
            """, (query, query))
            results = c.fetchall()
        except ValueError:
            pass
    
    if not results:
        await message.answer("üö´ –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
    for idx, (otype, oid, date, name, product, qty, total) in enumerate(results, 1):
        text += (f"{idx}. {otype}\n"
                 f"   –ù–æ–º–µ—Ä: {oid}\n"
                 f"   –î–∞—Ç–∞: {date}\n"
                 f"   –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {name}\n"
                 f"   –¢–æ–≤–∞—Ä: {product}\n"
                 f"   –ö–æ–ª-–≤–æ: {qty}\n"
                 f"   –°—É–º–º–∞: {total}‚ÇΩ\n\n")
    
    await message.answer(
    text,
    reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"üìÑ –û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑ {oid}",
                callback_data=f"open_{otype.lower()}_{oid}"
            )] 
            for _, oid, *_ in results
        ] + [
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
)


# ----------------- –û–ë–†–ê–ë–û–¢–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê ------------------
@router.callback_query(F.data.startswith("delete_"))
async def delete_order_start(callback: CallbackQuery, state: FSMContext):
    _, order_type, order_id = callback.data.split("_")
    await state.update_data(order_type=order_type, order_id=order_id)
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ {order_id}?",
        reply_markup=confirm_delete_kb(order_id, order_type)
    )
    await state.set_state(DeleteOrderState.confirm_delete)

@router.callback_query(F.data.startswith("confirm_delete_"), DeleteOrderState.confirm_delete)
async def confirm_delete_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    order_type = data["order_type"]

    try:
        conn.execute("BEGIN")
        
        if order_type == "supplier":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∑–∞–∫–∞–∑–∞—Ö
            c.execute("""
                SELECT client_order_id FROM warehouse 
                WHERE supplier_order_id = ? AND client_order_id IS NOT NULL
                LIMIT 1
            """, (order_id,))
            client_order = c.fetchone()
            
            if client_order:
                await callback.message.answer(
                    f"‚ùå –ó–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω. –¢–æ–≤–∞—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–∫–∞–∑–µ –∫–ª–∏–µ–Ω—Ç–∞: "
                    f"<a href='t.me/your_bot?start=order_{client_order[0]}'>{client_order[0]}</a>",
                    parse_mode=ParseMode.HTML
                )
                return

            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ warehouse
            c.execute("DELETE FROM warehouse WHERE supplier_order_id = ?", (order_id,))
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ supplier_orders
            c.execute("DELETE FROM supplier_orders WHERE order_id = ?", (order_id,))
        
        elif order_type == "client":
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ warehouse
            c.execute("""
                UPDATE warehouse 
                SET client_order_id = NULL 
                WHERE client_order_id = ?
            """, (order_id,))
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ client_orders
            c.execute("DELETE FROM client_orders WHERE order_id = ?", (order_id,))

        conn.commit()
        await callback.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", reply_markup=main_menu_kb())
    
    except sqlite3.Error as e:
        conn.rollback()
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    
    await state.clear()

@router.callback_query(F.data.startswith("back_to_order_"))
async def back_to_order(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split("_")[-1]
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await show_order_details(callback.message, order_id)
    await state.clear()

# ----------------- –ü–û–ö–ê–ó –î–ï–¢–ê–õ–ï–ô –ó–ê–ö–ê–ó–ê ------------------
async def show_order_details(message: Message, order_id: str):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
    c.execute("""
        SELECT 
            order_type,
            order_id, 
            date, 
            counterparty,
            product_name,
            quantity,
            total_price,
            serials
        FROM (
            SELECT 
                'supplier' as order_type, 
                order_id, 
                date, 
                supplier as counterparty, 
                product_name, 
                quantity, 
                total_price,
                serials
            FROM supplier_orders 
            WHERE order_id = ?
            UNION
            SELECT 
                'client' as order_type, 
                order_id, 
                date, 
                client as counterparty, 
                product_name, 
                quantity, 
                total_price,
                serials
            FROM client_orders 
            WHERE order_id = ?
        )
    """, (order_id, order_id))
    
    order_data = c.fetchone()
    
    if not order_data:
        await message.answer("üö´ –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    (order_type, oid, date, counterparty, 
     product, qty, total, serials) = order_data
     
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤
    has_serials = bool(serials and serials.strip())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    order_type_text = "–ø–æ—Å—Ç–∞–≤—â–∏–∫—É" if order_type == "supplier" else "–∫–ª–∏–µ–Ω—Ç—É"
    text = (
        f"üìÑ –ó–∞–∫–∞–∑ {order_type_text}:\n\n"
        f"üî¢ –ù–æ–º–µ—Ä: {oid}\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"üë§ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {counterparty}\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {product}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}\n"
        f"üí∞ –°—É–º–º–∞: {total}‚ÇΩ\n"
        f"üè∑Ô∏è –°–µ—Ä–∏–π–Ω–∏–∫–∏: {serials if has_serials else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤
    await message.answer(
        text,
        reply_markup=order_actions_kb(
            order_id=oid,
            order_type=order_type,
            has_serials=has_serials
        )
    )

# ----------------- –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ ------------------
@router.callback_query(F.data.startswith("open_"))
async def open_order(callback: CallbackQuery):
    _, order_type, order_id = callback.data.split("_")
    await show_order_details(callback.message, order_id)
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

from aiogram import F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from datetime import datetime

# –ö–æ–º–∞–Ω–¥–∞ "–û—Ç—á—ë—Ç"
@router.message(F.text == "–û—Ç—á—ë—Ç")
async def report_start(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data="report_period")],
        [InlineKeyboardButton(text="–ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="report_today")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", reply_markup=keyboard)
    await state.set_state(ReportState.choosing_type)

# –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
@router.callback_query(F.data == "report_today", ReportState.choosing_type)
async def report_today(callback: CallbackQuery, state: FSMContext):
    today = datetime.now().strftime("%d.%m.%Y")
    await send_report(callback.message, state, today, today)
    await state.clear()

# –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
@router.callback_query(F.data == "report_period", ReportState.choosing_type)
async def report_period(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ - –¥–¥.–º–º.–≥–≥–≥–≥:")
    await state.set_state(ReportState.entering_period)

# –í–≤–æ–¥ –ø–µ—Ä–∏–æ–¥–∞
@router.message(ReportState.entering_period)
async def report_period_entered(message: Message, state: FSMContext):
    try:
        start_str, end_str = map(str.strip, message.text.split("-"))
        datetime.strptime(start_str, "%d.%m.%Y")
        datetime.strptime(end_str, "%d.%m.%Y")
        await send_report(message, state, start_str, end_str)
        await state.clear()
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ - –¥–¥.–º–º.–≥–≥–≥–≥:")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
async def send_report(message, state, start_date, end_date):
    c.execute("""
        SELECT '–ü–æ—Å—Ç–∞–≤—â–∏–∫', date, product_name, SUM(quantity), SUM(total_price)
        FROM supplier_orders
        WHERE date BETWEEN ? AND ?
        GROUP BY product_name, date
    """, (start_date, end_date))
    supplier_data = c.fetchall()

    c.execute("""
        SELECT '–ö–ª–∏–µ–Ω—Ç', date, product_name, SUM(quantity), SUM(total_price)
        FROM client_orders
        WHERE date BETWEEN ? AND ?
        GROUP BY product_name, date
    """, (start_date, end_date))
    client_data = c.fetchall()

    text = f"üìä –û—Ç—á—ë—Ç —Å {start_date} –ø–æ {end_date}:\n\n"

    total_supplier_qty = 0
    total_supplier_sum = 0
    if supplier_data:
        text += "üì• –ü–æ—Å—Ç–∞–≤–∫–∏:\n"
        for _, date, product, qty, total in supplier_data:
            total_supplier_qty += qty
            total_supplier_sum += total
            text += f"{date}: {product} ‚Äî {qty} —à—Ç, —Å—É–º–º–∞ {total}‚ÇΩ\n"
        text += f"\n–ò—Ç–æ–≥–æ –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º: {total_supplier_qty} —à—Ç –Ω–∞ {total_supplier_sum}‚ÇΩ\n"
    else:
        text += "üì• –ü–æ—Å—Ç–∞–≤–∫–∏: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    total_client_qty = 0
    total_client_sum = 0
    if client_data:
        text += "\nüì§ –ü—Ä–æ–¥–∞–∂–∏:\n"
        for _, date, product, qty, total in client_data:
            total_client_qty += qty
            total_client_sum += total
            text += f"{date}: {product} ‚Äî {qty} —à—Ç, —Å—É–º–º–∞ {total}‚ÇΩ\n"
        text += f"\n–ò—Ç–æ–≥–æ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º: {total_client_qty} —à—Ç –Ω–∞ {total_client_sum}‚ÇΩ\n"
    else:
        text += "\nüì§ –ü—Ä–æ–¥–∞–∂–∏: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    # –ü–æ–¥—Å—á—ë—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏
    net_profit = total_client_sum - total_supplier_sum
    text += f"\nüí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit}‚ÇΩ"

    await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=main_menu_kb())

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
dp.include_router(router)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())