# üì¶ Telegram –±–æ—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É —Å Google Sheets
# –ê–≤—Ç–æ—Ä: OpenAI ChatGPT (2025)

import logging
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.filters import Command
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import types
from aiogram.types import InputTextMessageContent
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Update
import asyncio

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7957981552:AAE33m7eOVbce18vdk5BNjxQbwqKyZcMQH4"
GOOGLE_SHEET_KEY = "1OTHRzo4OAH_bWuplxYjwqpyJm857mYm0kaG0RHhHcOY"
CREDENTIALS_FILE = "credentials.json"

# üìä Google Sheets
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
gclient = gspread.authorize(creds)
sheet = gclient.open_by_key(GOOGLE_SHEET_KEY).sheet1

# üóÑÔ∏è –ë–î
conn = sqlite3.connect("/home/ubuntu/bot-sales/data/orders.db", check_same_thread=False)
c = conn.cursor()
c.execute("""
CREATE TABLE IF NOT EXISTS supplier_orders (
    order_id TEXT,
    date TEXT,
    supplier TEXT,
    product_name TEXT,
    quantity INTEGER,
    unit_price REAL,
    total_price REAL,
    serials TEXT,
    product_code TEXT
)
""")
c.execute("""
CREATE TABLE IF NOT EXISTS warehouse (
    serial TEXT PRIMARY KEY,
    product_name TEXT,
    order_id TEXT,
    unit_price REAL
)
""")
c.execute("""
CREATE TABLE IF NOT EXISTS suppliers (
    name TEXT PRIMARY KEY
)
""")
conn.commit()
logging.info("‚úÖ –°–µ—Ä–∏–π–Ω–∏–∫–∏ –∏ –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

# üì¶ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è

class OrderState(StatesGroup):
    choosing_date = State()
    entering_custom_date = State()
    entering_supplier = State()
    confirming_supplier = State()
    searching_product = State()
    choosing_product = State()
    confirming_product = State()
    entering_quantity = State()
    choosing_serial_mode = State()
    entering_serial = State()
    editing_order = State()
    entering_price = State()
    confirming_summary = State()
    entering_serial_new = State()
    entering_serial_existing = State()

# üß† –ü–∞–º—è—Ç—å
storage = MemoryStorage()
from aiogram.client.default import DefaultBotProperties
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=storage)
router = Router()
temp_storage = {}

# ‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É", callback_data="create_order")],
        [InlineKeyboardButton(text="üìã –°–≤–æ–¥–∫–∞", callback_data="summary_menu")]
    ])

def date_choice_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="today")],
        [InlineKeyboardButton(text="–ò–Ω–∞—è –¥–∞—Ç–∞", callback_data="other_date")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def cancel_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def supplier_confirm_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ", callback_data="create_supplier")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ", callback_data="search_supplier_again")]
    ])

# ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã

def confirm_or_cancel_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="save_order")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="edit_order")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
    ])

# üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞
def search_products(query):
    values = sheet.get_all_values()[1:]
    results = []
    for row in values:
        if len(row) >= 6:
            code = row[4].strip()
            name = row[5].strip()
            if query.lower() in code.lower() or query.lower() in name.lower():
                results.append((code, name))
    return results

#–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
for handler in logging.root.handlers[:]:
    logging.root.removeHandler(handler)

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

# üü¢ –°—Ç–∞—Ä—Ç
@router.message(Command("start"))
async def handle_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    logging.info(f"‚ñ∂Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")


# üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Äî —à–∞–≥ 1: –¥–∞—Ç–∞
@router.callback_query(F.data == "create_order")
async def create_order(callback: CallbackQuery, state: FSMContext):
    order_id = f"OS -{datetime.now().strftime('%d.%m')} - {datetime.now().strftime('%H:%M')}"
    await state.update_data(order_id=order_id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞:", reply_markup=date_choice_kb())
    await state.set_state(OrderState.choosing_date)

@router.callback_query(F.data == "today", OrderState.choosing_date)
async def set_today(callback: CallbackQuery, state: FSMContext):
    date = datetime.now().strftime("%d.%m.%Y")
    data = await state.get_data()
    c.execute("INSERT INTO supplier_orders (order_id, date) VALUES (?, ?)", (data['order_id'], date))
    conn.commit()
    await state.update_data(date=date)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderState.entering_supplier)

@router.callback_query(F.data == "other_date", OrderState.choosing_date)
async def ask_custom_date(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:", reply_markup=cancel_kb())
    await state.set_state(OrderState.entering_custom_date)

@router.message(OrderState.entering_custom_date)
async def set_custom_date(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text.strip(), "%d.%m.%y")
        await state.update_data(date=message.text.strip())
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", reply_markup=cancel_kb())
        await state.set_state(OrderState.entering_supplier)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:")

@router.message(OrderState.entering_supplier)
async def enter_supplier(message: Message, state: FSMContext):
    supplier = message.text.strip()
    data = await state.get_data()
    c.execute("UPDATE supplier_orders SET supplier = ? WHERE order_id = ?", (supplier, data['order_id']))
    conn.commit()
    await state.update_data(supplier=supplier)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderState.searching_product)

@router.callback_query(F.data == "create_supplier", OrderState.confirming_supplier)
async def confirm_supplier(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    logging.info(f"üîé FSM state data: {data}")
    logging.info(f"üì¶ –î–∞–Ω–Ω—ã–µ –∏–∑ FSM: {data}")
    c.execute("INSERT OR IGNORE INTO suppliers (name) VALUES (?)", (data["supplier"],))
    conn.commit()
    await callback.message.edit_text("‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderState.searching_product)

@router.callback_query(F.data == "search_supplier_again", OrderState.confirming_supplier)
async def retry_supplier(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderState.entering_supplier)

# üîç –ü–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
@router.message(OrderState.searching_product)
async def handle_product_search(message: Message, state: FSMContext):
    query = message.text.strip()
    results = search_products(query)

    if not results:
        await message.answer("üîç –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–Ω–æ–≤–∞:", reply_markup=cancel_kb())
        return

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –ø–æ –∫–æ–¥—É
    if len(results) == 1 and query.lower() == results[0][0].lower():
        code, name = results[0]
        await state.update_data(product_code=code, product_name=name)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_product")],
            [InlineKeyboardButton(text="üîÑ –ü–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ", callback_data="search_product_again")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
        await message.answer(f"–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: <b>{name}</b> (–∫–æ–¥: {code})", reply_markup=keyboard)
        await state.set_state(OrderState.confirming_product)
    else:
        builder = InlineKeyboardBuilder()
        for code, name in results[:10]:
            builder.button(text=f"{name} ({code})", callback_data=f"choose_product:{code}")
        builder.row(InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ", callback_data="search_product_restart"))
        builder.adjust(1)
        builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        await message.answer("üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π:", reply_markup=builder.as_markup())
        await state.set_state(OrderState.choosing_product)

@router.callback_query(F.data.startswith("choose_product:"), OrderState.choosing_product)
async def choose_product(callback: CallbackQuery, state: FSMContext):
    code = callback.data.split(":")[1]
    results = search_products(code)
    name = next((name for c, name in results if c == code), None)
    if name:
        await state.update_data(product_code=code, product_name=name)
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: <b>{name}</b> (–∫–æ–¥: {code}). –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=cancel_kb())
        await state.set_state(OrderState.entering_quantity)
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞. –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=cancel_kb())
        await state.set_state(OrderState.searching_product)

@router.callback_query(F.data == "confirm_product", OrderState.confirming_product)
async def confirm_single_product(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderState.entering_quantity)

@router.callback_query(F.data.in_(["search_product_again", "search_product_restart"]))
async def retry_product(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderState.searching_product)

@router.message(OrderState.entering_quantity)
async def enter_quantity(message: Message, state: FSMContext):
    try:
        qty = int(message.text.strip())
        if qty < 1:
            raise ValueError()
        await state.update_data(quantity=qty)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ (‚ÇΩ):", reply_markup=cancel_kb())
        await state.set_state(OrderState.entering_price)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0):", reply_markup=cancel_kb())

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
@router.message(OrderState.entering_serials)
async def handle_serial_entry_new(message: Message, state: FSMContext):
    serials_text = message.text.strip()
    if not serials_text:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return

    data = await state.get_data()

    order_id = data.get("order_id")
    product_code = data.get("product_code")
    product_name = data.get("product_name")
    quantity = data.get("quantity")
    unit_price = data.get("unit_price")
    supplier = data.get("supplier")
    date = data.get("date")

    serials = [s.strip() for s in serials_text.split(",") if s.strip()]
    if len(serials) != quantity:
        await message.answer(f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ ({len(serials)}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–∞ ({quantity}).")
        return
    if len(set(serials)) != len(serials):
        await message.answer("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –∑–∞–∫–∞–∑–∞—Ö
    conflicting = []
    for s in serials:
        c.execute("SELECT order_id FROM warehouse WHERE serial = ? AND order_id != ?", (s, order_id))
        row = c.fetchone()
        if row:
            conflicting.append((s, row[0]))

    if conflicting:
        conflict_text = "\n".join([f"üîÅ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä {s} —É–∂–µ –µ—Å—Ç—å –≤ –∑–∞–∫–∞–∑–µ {oid} ‚Äî /order_{oid}" for s, oid in conflicting])
        await message.answer(f"‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –∑–∞–∫–∞–∑–∞—Ö:\n{conflict_text}")
        return

    total_price = unit_price * quantity

    c.execute("""
        UPDATE supplier_orders SET
            product_name = ?, quantity = ?, unit_price = ?,
            total_price = ?, serials = ?, supplier = ?, date = ?, product_code = ?
        WHERE order_id = ?
    """, (
        product_name, quantity, unit_price,
        total_price, ",".join(serials), supplier, date, product_code,
        order_id
    ))
    conn.commit()

    for serial in serials:
        c.execute("""
            INSERT OR IGNORE INTO warehouse (serial, product_name, order_id, unit_price)
            VALUES (?, ?, ?, ?)
        """, (serial, product_name, order_id, unit_price))

    conn.commit()
    logging.info(f"‚úÖ –°–µ—Ä–∏–π–Ω–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {serials} | –ó–∞–∫–∞–∑: {order_id}")
    await state.set_state(OrderState.confirming_summary)
    await message.answer("‚úÖ –°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑ –∏ –Ω–∞–∂–º–∏—Ç–µ \"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å\" –∏–ª–∏ \"–û—Ç–º–µ–Ω–∞\".", reply_markup=confirm_or_cancel_kb())

@router.message(OrderState.entering_serial_existing)
async def handle_serial_entry_existing(message: Message, state: FSMContext):
    new_serial = message.text.strip()
    data = await state.get_data()

    order_id = data.get("order_id")
    product_code = data.get("serial_target")
    current = data.get("current_serials", [])

    c.execute("SELECT quantity FROM supplier_orders WHERE order_id = ? AND product_code = ?", (order_id, product_code))
    row = c.fetchone()
    if not row:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–∫–∞–∑–µ.", reply_markup=main_menu_kb())
        return

    quantity = row[0]

    if new_serial in current:
        await message.answer("‚ùå –¢–∞–∫–æ–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —É–∂–µ –≤–≤–µ–¥—ë–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:", reply_markup=cancel_kb())
        return

    c.execute("SELECT serial FROM warehouse WHERE serial = ?", (new_serial,))
    if c.fetchone():
        await message.answer("‚ùå –¢–∞–∫–æ–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:", reply_markup=cancel_kb())
        return

    if len(current) >= quantity:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–æ –º–∞–∫—Å–∏–º—É–º —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ä–∏–π–Ω–∏–∫–∏", callback_data="save_serials")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
        ))
        return

    current.append(new_serial)
    await state.update_data(current_serials=current)

    if len(current) == quantity:
        await message.answer(f"‚úÖ –í—Å–µ {quantity} —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤–≤–µ–¥–µ–Ω—ã.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ä–∏–π–Ω–∏–∫–∏", callback_data="save_serials")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
        ))
    else:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ {len(current)+1}-–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä (–∏–∑ {quantity}):", reply_markup=cancel_kb())

@router.callback_query(F.data == "serials_later", OrderState.choosing_serial_mode)
async def skip_serials(callback: CallbackQuery, state: FSMContext):
    await state.update_data(serials=[])
    await callback.message.edit_text("–°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ.", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä", callback_data="add_more")],
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="finish_order")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
    ))
    await state.set_state(OrderState.confirming_summary)

# ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —Å–≤–æ–¥–∫–∞
@router.callback_query(F.data == "add_more")
async def add_more_items(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderState.searching_product)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑" (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–¥–∞)
@router.callback_query(F.data == "finish_order")
async def finalize_order(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    session = await state.get_data()
    order_id = session.get("order_id")

    if not order_id:
        logging.warning("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç order_id –≤ FSMContext –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏")
        await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.", reply_markup=main_menu_kb())
        return

    c.execute("SELECT product_name, quantity, unit_price, total_price, product_code FROM supplier_orders WHERE order_id = ?", (order_id,))
    rows = c.fetchall()

    if not rows:
        logging.warning(f"‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {order_id}")
        await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.", reply_markup=main_menu_kb())
        return

    total_sum = sum(row[3] for row in rows)  # total_price
    date = session.get("date", "‚Äî")
    supplier = session.get("supplier", "‚Äî")

    lines = [
        f"üì¶ <b>–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞ {order_id}</b>",
        f"–î–∞—Ç–∞: {date}",
        f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier}",
        ""
    ]
    for product_name, qty, price, total, code in rows:
        lines.append(f"{product_name} (–∫–æ–¥: {code}) x {qty} —à—Ç. –ø–æ {price}‚ÇΩ = {total}‚ÇΩ")

    lines.append(f"üí∞ –ò—Ç–æ–≥–æ: {total_sum}‚ÇΩ")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="save_order")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="edit_order")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
    ])

    await callback.message.edit_text("\n".join(lines), reply_markup=kb, parse_mode=ParseMode.HTML)
    await state.set_state(OrderState.confirming_summary)


# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

@router.message(OrderState.entering_price)
async def handle_price_input(message: Message, state: FSMContext):
    try:
        price = float(message.text.replace(",", ".").strip())
        session = await state.get_data()
        order_id = session.get("order_id")
        product_code = session.get("product_code")
        product_name = session.get("product_name")
        quantity = session.get("quantity")
        date = session.get("date")
        supplier = session.get("supplier")
        edit_action = session.get("edit_action")

        if not all([order_id, product_code, product_name, quantity, date, supplier]):
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ.", reply_markup=main_menu_kb())
            return

        total = price * quantity
        await state.update_data(unit_price=price)

        if edit_action == "edit_price":
            c.execute("""
                UPDATE supplier_orders
                SET unit_price = ?, total_price = quantity * ?
                WHERE order_id = ? AND product_code = ?
            """, (price, price, order_id, product_code))
            conn.commit()
            await message.answer("‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=main_menu_kb())
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –∑–∞–∫–∞–∑–µ
        c.execute("""
            SELECT COUNT(*) FROM supplier_orders
            WHERE order_id = ? AND product_code = ?
        """, (order_id, product_code))
        exists = c.fetchone()[0]

        if exists:
            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            c.execute("""
                UPDATE supplier_orders
                SET quantity = ?, unit_price = ?, total_price = ?, product_name = ?, supplier = ?, date = ?
                WHERE order_id = ? AND product_code = ?
            """, (quantity, price, total, product_name, supplier, date, order_id, product_code))
        else:
            # –≤—Å—Ç–∞–≤–∫–∞
            c.execute("""
                INSERT INTO supplier_orders (
                    order_id, date, supplier, product_name,
                    quantity, unit_price, total_price, serials, product_code
                ) VALUES (?, ?, ?, ?, ?, ?, ?, '', ?)
            """, (
                order_id, date, supplier, product_name,
                quantity, price, total, product_code
            ))
        conn.commit()

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üî¢ –í–≤–µ—Å—Ç–∏ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å–µ–π—á–∞—Å", callback_data="serials_now")],
            [InlineKeyboardButton(text="‚è≠ –í–≤–µ—Å—Ç–∏ –ø–æ–∑–∂–µ", callback_data="serials_later")]
        ])
        await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–æ–∑–∂–µ?", reply_markup=kb)
        await state.set_state(OrderState.choosing_serial_mode)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.00):", reply_markup=cancel_kb())


# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data == "save_order", OrderState.confirming_summary)
async def save_order(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    order = temp_storage.get(user_id)

    if order:
        logging.info(f"üì¶ –†–µ–∂–∏–º: temp_storage | user_id={user_id}")
        source = "temp_storage"
    else:
        logging.info(f"üì¶ –†–µ–∂–∏–º: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö | user_id={user_id}")
        order_id = data.get("order_id")
        if not order_id:
            logging.warning("‚ùå –ù–µ—Ç order_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
            await callback.message.edit_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", reply_markup=main_menu_kb())
            return

        c.execute("SELECT DISTINCT order_id, product_name, quantity, unit_price, total_price, product_code, serials FROM supplier_orders WHERE order_id = ?", (order_id,))
        rows = c.fetchall()

        if not rows:
            logging.warning("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!")
            await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=main_menu_kb())
            return

        order = {
            "order_id": order_id,
            "items": [
                {
                    "product_name": r[1],
                    "quantity": r[2],
                    "unit_price": r[3],
                    "total_price": r[4],
                    "product_code": r[5],
                    "serials": r[6].split(",") if r[6] else []
                } for r in rows
            ]
        }
        source = "db"

    if not order.get("items"):
        logging.warning(f"‚ùå –ó–∞–∫–∞–∑ –ø—É—Å—Ç: {order}")
        await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –ø—É—Å—Ç.", reply_markup=main_menu_kb())
        return

    for item in order["items"]:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
        c.execute("SELECT 1 FROM supplier_orders WHERE order_id = ? AND product_code = ?", (order["order_id"], item["product_code"]))
        exists = c.fetchone()

        if exists:
            logging.info(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {item['product_code']}")
            continue

        logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–∫–∞–∑–∞: {order['order_id']}, {item['product_code']}")
        c.execute("""
            INSERT INTO supplier_orders (
                order_id, date, supplier, product_name,
                quantity, unit_price, total_price, serials, product_code
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            order["order_id"],
            data.get("date"),
            data.get("supplier"),
            item["product_name"],
            item["quantity"],
            item["unit_price"],
            item["total_price"],
            ",".join(item["serials"]),
            item["product_code"]
        ))

        for serial in item["serials"]:
            c.execute("""
                INSERT OR IGNORE INTO warehouse (serial, product_name, order_id, unit_price)
                VALUES (?, ?, ?, ?)
            """, (
                serial, item["product_name"], order["order_id"], item["unit_price"]
            ))

    conn.commit()
    await state.clear()
    temp_storage.pop(user_id, None)
    await callback.message.edit_text("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=main_menu_kb())


# ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data == "edit_order", OrderState.confirming_summary)
async def edit_order_menu(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞", callback_data="edit_date")],
        [InlineKeyboardButton(text="üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫", callback_data="edit_supplier")],
        [InlineKeyboardButton(text="üì¶ –¢–æ–≤–∞—Ä", callback_data="edit_product")],
        [InlineKeyboardButton(text="üî¢ –ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞", callback_data="edit_quantity")],
        [InlineKeyboardButton(text="üí≤ –¶–µ–Ω–∞ –∑–∞ –µ–¥.", callback_data="edit_price")],
        [InlineKeyboardButton(text="üîÅ –°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞", callback_data="edit_serials")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="finish_order")]
    ])
    await callback.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)

@router.callback_query(F.data.in_(["edit_price", "edit_quantity", "edit_serials"]))
async def choose_item_to_edit(callback: CallbackQuery, state: FSMContext):
    action = callback.data  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    data = await state.get_data()
    order_id = data.get("order_id")

    c.execute("SELECT DISTINCT product_name, product_code FROM supplier_orders WHERE order_id = ?", (order_id,))
    items = c.fetchall()

    if not items:
        await callback.message.edit_text("‚ùå –í –∑–∞–∫–∞–∑–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=main_menu_kb())
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ FSM
    await state.update_data(edit_action=action)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{name}", callback_data=f"edit_item:{code}")]
        for name, code in items
    ])
    kb.inline_keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)

@router.callback_query(F.data.startswith("edit_item:"))
async def handle_item_selection(callback: CallbackQuery, state: FSMContext):
    product_code = callback.data.split(":")[1]
    data = await state.get_data()
    await state.update_data(product_code=product_code)

    action = data.get("edit_action")

    if action == "edit_price":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (‚ÇΩ):", reply_markup=cancel_kb())
        await state.set_state(OrderState.entering_price)

    elif action == "edit_quantity":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=cancel_kb())
        await state.set_state(OrderState.entering_quantity)

    elif action == "edit_serials":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:", reply_markup=cancel_kb())
        await state.set_state(OrderState.entering_serial)

@router.callback_query(F.data == "edit_date")
async def edit_date(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:", reply_markup=cancel_kb())
    await state.set_state(OrderState.entering_custom_date)

@router.callback_query(F.data == "edit_supplier")
async def edit_supplier(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderState.entering_supplier)

@router.callback_query(F.data == "edit_product")
async def edit_product(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –∏–ª–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_kb())
    await state.set_state(OrderState.searching_product)

# üìã –°–≤–æ–¥–∫–∞ ‚Üí –ó–∞–∫–∞–∑—ã –±–µ–∑ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
@router.callback_query(F.data == "summary_menu")
async def summary_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –ë–µ–∑ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤", callback_data="no_serials")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
    ])
    await callback.message.edit_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–≤–æ–¥–∫–∏:", reply_markup=kb)
    await state.clear()

@router.callback_query(F.data == "no_serials")
async def list_orders_without_serials(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        c.execute("SELECT DISTINCT order_id FROM supplier_orders WHERE serials IS NULL OR serials = ''")
        rows = c.fetchall()
        logging.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ –ë–î: {len(rows)}")
        if not rows:
            await callback.message.edit_text("‚úÖ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.", reply_markup=main_menu_kb())
            return

        kb = InlineKeyboardBuilder()
        for row in rows:
            order_id = row[0]
            kb.button(text=order_id, callback_data=f"view_order:{order_id}")
        kb.adjust(1)
        kb.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel"))
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –±–µ–∑ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤:", reply_markup=kb.as_markup())
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}", reply_markup=main_menu_kb())

@router.callback_query(F.data.startswith("view_order:"))
async def show_order_summary(callback: CallbackQuery, state: FSMContext):
    logging.info(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞: {callback.data}")
    try:
        order_id = callback.data.split(":", 1)[1]
        logging.info(f"üîç –ò–∑–≤–ª–µ—á—ë–Ω order_id: {order_id}")
        logging.info(f"üì¶ SQL-–∑–∞–ø—Ä–æ—Å: SELECT date, supplier, product_name, quantity, product_code FROM supplier_orders WHERE order_id = {order_id}")
        c.execute("SELECT date, supplier, product_name, quantity, product_code FROM supplier_orders WHERE order_id = ?", (order_id,))
        rows = c.fetchall()
        if not rows:
            logging.warning("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_kb())
            return

        date, supplier = rows[0][:2]
        lines = [
            f"üì¶ <b>–ó–∞–∫–∞–∑ {order_id}</b>",
            f"–î–∞—Ç–∞: {date}",
            f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier}"
        ]
        kb = InlineKeyboardMarkup(inline_keyboard=[])
        for row in rows:
            product_name = row[2]
            quantity = row[3]
            product_code = row[4]
            lines.append(f"üõí {product_name} (–∫–æ–¥: {product_code}) x {quantity} —à—Ç.")
            kb.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–π–Ω–∏–∫–∏: {product_code}",
                    callback_data=f"add_serials:{order_id}:{product_code}"
                )
            ])

        kb.inline_keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")])
        await callback.message.edit_text("".join(lines), reply_markup=kb, parse_mode=ParseMode.HTML)
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}", reply_markup=main_menu_kb())
    

@router.callback_query(F.data.startswith("add_serials:"))
async def start_adding_serials(callback: CallbackQuery, state: FSMContext):
    logging.info(f"üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ add_serials: {callback.data}")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    raw = callback.data[len("add_serials:"):]
    order_id, product_code = raw.rsplit(":", 1)
    order_id = order_id.strip()
    product_code = product_code.strip()
    logging.info(f"üî¢ –ò–∑–≤–ª–µ—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: order_id={order_id}, product_code={product_code}")

    # –ó–∞–ø—Ä–æ—Å –≤ –ë–î
    logging.info("üì° –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î: supplier_orders")
    c.execute("""
        SELECT product_name, quantity, unit_price
        FROM supplier_orders
        WHERE order_id = ? AND product_code = ?
    """, (order_id, product_code))
    row = c.fetchone()
    logging.debug(f"üì• row from DB: {row} for order_id={order_id}, product_code={product_code}")

    if not row:
        logging.warning("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤")
        await callback.message.edit_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_kb())
        return

    product_name, quantity, unit_price = row
    logging.info(f"üì¶ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {product_name}, {quantity} —à—Ç., {unit_price}‚ÇΩ")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(
        order_id=order_id,
        serial_target=product_code,
        current_serials=[],
        quantity=quantity
    )

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø–æ –æ–¥–Ω–æ–º—É:", reply_markup=cancel_kb())
    await state.set_state(OrderState.entering_serial_existing)

@router.callback_query(F.data == "save_serials")
async def save_serials(callback: CallbackQuery, state: FSMContext):
    logging.info(f"üîß save_serials triggered by user_id={callback.from_user.id}")
    data = await state.get_data()

    serials = data.get("current_serials", [])
    order_id = data.get("order_id")
    product_code = data.get("serial_target")

    if not serials or not order_id or not product_code:
        logging.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: serials, order_id –∏–ª–∏ product_code –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        await callback.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.", reply_markup=main_menu_kb())
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
    c.execute("SELECT product_name, unit_price, serials FROM supplier_orders WHERE order_id = ? AND product_code = ?", (order_id, product_code))
    row = c.fetchone()

    if not row:
        logging.warning(f"‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–∫–∞–∑–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤: {order_id}, {product_code}")
        await callback.message.edit_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_kb())
        return

    product_name, unit_price, existing_serials = row
    existing_serials_list = existing_serials.split(",") if existing_serials else []
    updated_serials = existing_serials_list + serials

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    c.execute("""
        UPDATE supplier_orders
        SET serials = ?
        WHERE order_id = ? AND product_code = ?
    """, (",".join(updated_serials), order_id, product_code))

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–∫–ª–∞–¥
    for sn in serials:
        c.execute("""
            INSERT OR IGNORE INTO warehouse (serial, product_name, order_id, unit_price)
            VALUES (?, ?, ?, ?)
        """, (sn, product_name, order_id, unit_price))

    conn.commit()
    await state.clear()
    await callback.message.edit_text("‚úÖ –°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=main_menu_kb())

# ‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    asyncio.run(dp.start_polling(bot))
 
# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
@router.callback_query(F.data == "cancel")
@router.callback_query(F.data == "cancel", state="*")
async def cancel_process(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("order_id")
    if order_id:
        c.execute("DELETE FROM supplier_orders WHERE order_id = ? AND (serials IS NULL OR serials = '')", (order_id,))
        conn.commit()
        logging.info(f"‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω: {order_id}")
    else:
        logging.info("‚ùå –û—Ç–º–µ–Ω–∞: order_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")

    await state.clear()
    await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_kb())
